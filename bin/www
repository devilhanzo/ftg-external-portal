#!/usr/bin/env node

const app = require('../app');
const https = require('https');
const fs = require('fs');

const key = fs.readFileSync('kkh.go.th.key');
const cert = fs.readFileSync('STAR_kkh_go_th.crt');
const ca = fs.readFileSync('STAR_kkh_go_th_ca.crt');

const options = {
  key,
  cert,
  ca,
};

// app.listen(5003,()=>{
//   console.log('server is running on port 5003');
// })

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5003');
app.set('port', port);

/**
 * Create HTTP server.
 */

// const server = http.createServer(app);
const server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log('Express server listening on %d', port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind } requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  // debug(`Listening on ${bind}`);
}